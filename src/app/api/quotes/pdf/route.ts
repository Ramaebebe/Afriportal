import { NextRequest, NextResponse } from "next/server";
import { getServiceClient } from "@/lib/supabaseServer";
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

export const dynamic = "force-dynamic";

export async function POST(req: NextRequest) {
  try {
    const payload = await req.json();
    // expected: { quoteNumber, customer, costCenter, vehicle, options, pricing, generatedBy }
    const supa = getServiceClient();
    const pdf = await PDFDocument.create();
    const page = pdf.addPage([595.28, 841.89]); // A4
    const font = await pdf.embedFont(StandardFonts.Helvetica);
    const titleColor = rgb(0.925, 0.392, 0.145);
    const text = (x:number, y:number, s:string, size=10) => page.drawText(s, { x, y, size, font });

    // Brand header
    page.drawRectangle({ x: 0, y: page.getHeight()-54, width: page.getWidth(), height: 54, color: titleColor });
    text(36, page.getHeight()-36, "Afrirent – Official Quotation", 16);

    let y = page.getHeight()-90;
    text(36, y, `Quote #: ${payload.quoteNumber||"-"}`); y-=16;
    text(36, y, `Customer: ${payload.customer?.name||"-"}  (${payload.costCenter||"-"})`); y-=24;

    text(36, y, "Vehicle"); y-=14;
    text(36, y, `Make/Model: ${payload.vehicle?.make||"-"} ${payload.vehicle?.model||""}`); y-=14;
    text(36, y, `Derivative: ${payload.vehicle?.derivative||"-"}  MM Code: ${payload.vehicle?.mmCode||"-"}`); y-=14;
    text(36, y, `Term: ${payload.pricing?.termMonths||"-"} months   Mileage: ${payload.pricing?.mileage||"-"} km/month`); y-=20;

    text(36, y, "Accessories"); y-=14;
    const accessories = Array.isArray(payload.options?.accessories) ? payload.options.accessories : [];
    if (accessories.length===0) {
      text(36, y, "- None"); y-=16;
    } else {
      for (const a of accessories) { text(36, y, `• ${a.name}  R${(a.price||0).toLocaleString?.()||a.price}`); y-=14; }
      y-=4;
    }

    text(36, y, "Pricing Summary"); y-=14;
    text(36, y, `Base Payment: R${payload.pricing?.base?.toLocaleString?.()||payload.pricing?.base}`); y-=14;
    text(36, y, `Opex (Maint/Tyres/Ins/Admin): R${payload.pricing?.opex?.toLocaleString?.()||payload.pricing?.opex}`); y-=14;
    text(36, y, `Monthly (Incl): R${payload.pricing?.monthly?.toLocaleString?.()||payload.pricing?.monthly}`); y-=14;
    text(36, y, `Total (Term): R${payload.pricing?.total?.toLocaleString?.()||payload.pricing?.total}`); y-=24;

    text(36, y, "Notes"); y-=14;
    text(36, y, payload.notes || "All pricing subject to final credit approval and stock availability."); y-=24;

    // Footer
    page.drawRectangle({ x: 0, y: 0, width: page.getWidth(), height: 28, color: rgb(0.085, 0.095, 0.13) });
    text(36, 10, `Generated by ${payload.generatedBy||"Portal"} • ${new Date().toLocaleString()}`, 9);

    const bytes = await pdf.save();

    // Upload to storage and return signed URL
    const fileName = `quote-${payload.quoteNumber||Date.now()}.pdf`;
    const { data: up, error: upErr } = await supa.storage.from("signed-quotes").upload(fileName, bytes, {
      contentType: "application/pdf",
      upsert: true,
    });
    if (upErr) throw upErr;

    const { data: signed, error: sErr } = await supa.storage.from("signed-quotes").createSignedUrl(up.path, 60*60);
    if (sErr) throw sErr;

    return NextResponse.json({ url: signed.signedUrl, path: up.path });
  } catch (e: any) {
    return NextResponse.json({ error: e.message || "Failed to build PDF" }, { status: 500 });
  }
}

